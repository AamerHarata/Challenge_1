#pragma checksum "D:\GitFolders\Programming\Twente\TestGoogle\Views\Challenge_2\Map.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2f62845a21778ca65fa6912a3ad2de643046450b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Challenge_2_Map), @"mvc.1.0.view", @"/Views/Challenge_2/Map.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Challenge_2/Map.cshtml", typeof(AspNetCore.Views_Challenge_2_Map))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\GitFolders\Programming\Twente\TestGoogle\Views\_ViewImports.cshtml"
using TestGoogle;

#line default
#line hidden
#line 2 "D:\GitFolders\Programming\Twente\TestGoogle\Views\_ViewImports.cshtml"
using TestGoogle.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2f62845a21778ca65fa6912a3ad2de643046450b", @"/Views/Challenge_2/Map.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e27fe35e2483c1a27029c80184f6beac9797c8ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Challenge_2_Map : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-center"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("map"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("auto"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("height", new global::Microsoft.AspNetCore.Html.HtmlString("100%"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/CroppedMap.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: auto; height: 100%"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
#line 3 "D:\GitFolders\Programming\Twente\TestGoogle\Views\Challenge_2\Map.cshtml"
  
    ViewBag.Title = "title";
    Layout = "_Layout";

#line default
#line hidden
            BeginContext(66, 226, true);
            WriteLiteral("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n\r\n<i class=\"fa fa-mobile-phone\" id=\"mobile-icon\" style=\"font-size:48px; color: red;position: absolute\"></i>\r\n\r\n");
            EndContext();
            BeginContext(508, 33, true);
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    ");
            EndContext();
            BeginContext(541, 127, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "2f62845a21778ca65fa6912a3ad2de643046450b5965", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute(";", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(668, 16, true);
            WriteLiteral("\r\n</div>\r\n\r\n\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(703, 12902, true);
                WriteLiteral(@"
    <script>
        $(document).ready(function() {
            const map = $(""#map"");
            const mobile = $(""#mobile-icon"");

            

//            console.log(map.width());
            
            
            
            function setElementPos(element, mapPic, x=0, y=0) {

                const realWidth = $(mapPic).width();
                const realHeight = $(mapPic).height();

                x = realWidth * x / 50;
                y = realHeight * y / 38;
                
                let posX = $(mapPic).offset().left - $(element).width()/2;
                let posY = $(mapPic).offset().top - $(element).height()/2 + realHeight;

                posX += x;
                posY -= y;
                $(element).css(""top"", posY).css(""left"", posX);
                

                

            }

            setInterval(function (){$(mobile).fadeOut(500).fadeIn(500)}, 1500);
            
            
            
            
            
         ");
                WriteLiteral(@"   
            //Intersection AREA


//            const circle_1 = {x: 0, y: 0, r: 5}
//            const circle_2 = {x: 6, y: 0, r: 3}
//            const circle_3 = {x: 5, y: 5, r: 4}

//            anyIntersection(circle_1, circle_3, circle_2);
//            getIntersection(circle_1, circle_2, circle_3);
            const circle_1 = {x: 73, y: 19, r: 6.33287}
            const circle_2 = {x: 83, y: 10, r: 10.90483}
            const circle_3 = {x: 85, y: 25, r: 9.3426}

            
//            anyIntersection(circle_1, circle_2, circle_3);
//            getIntersection(circle_1, circle_2, circle_3);

        
            
            
            
            

            function anyIntersection(src_1, src_2, src_3) {
                //Calculate the distance between circles' centers

                const d_1_2 = Math.sqrt( sq2(src_2.x - src_1.x) + sq2(src_2.y - src_1.y));
                const d_1_3 = Math.sqrt( sq2(src_3.x - src_1.x) + sq2(src_3.y - src_1.y));
        ");
                WriteLiteral(@"        const d_2_3 = Math.sqrt( sq2(src_3.x - src_2.x) + sq2(src_3.y - src_2.y));
                
                if (d_1_2 >= (src_1.r + src_2.r))
                    return false;

                if (d_1_3 >= (src_1.r + src_3.r))
                    return false;

                if (d_2_3 >= (src_2.r + src_3.r))
                    return false;
                
                console.log(""Intersection exist"");

                return true;
            }
            
            function sq2(num) {
                return num * num;
            }
            
            function getIntersection(src_1, src_2, src_3) {
                //Distance on x and y from scr_1 to scr_2
                const d_x_1_2 = src_2.x - src_1.x;
                const d_y_1_2 = src_2.y - src_1.y;
                
                //The same between the other circles
                const d_x_1_3 = src_3.x - src_1.x;
                const d_y_1_3 = src_3.y - src_1.y;
                
              ");
                WriteLiteral(@"  const d_x_2_3 = src_3.x - src_2.x;
                const d_y_2_3 = src_3.y - src_2.y;
                
                
                //Distance between circles
                const d_1_2 = Math.sqrt( sq2(src_2.x - src_1.x) + sq2(src_2.y - src_1.y));
                const d_1_3 = Math.sqrt( sq2(src_3.x - src_1.x) + sq2(src_3.y - src_1.y));
                const d_2_3 = Math.sqrt( sq2(src_3.x - src_2.x) + sq2(src_3.y - src_2.y));
                
                
                //Distance between the center 1 and intersection point with line throw intersection
                const a_1_2 = (sq2(src_1.r) - sq2(src_2.r) + sq2(d_1_2)) / (2.0 * d_1_2) ;
                const a_1_3 = (sq2(src_1.r) - sq2(src_3.r) + sq2(d_1_3)) / (2.0 * d_1_3) ;
                const a_2_3 = (sq2(src_2.r) - sq2(src_3.r) + sq2(d_2_3)) / (2.0 * d_2_3) ;
                
                
                //Points inside intersection eclipse
                const Eclipse_x_1_2 = src_1.x + (d_x_1_2 * a_1_2/d_1_2);
 ");
                WriteLiteral(@"               const Eclipse_y_1_2 = src_1.y + (d_y_1_2 * a_1_2/d_1_2);
                
                const Eclipse_x_1_3 = src_1.x + (d_x_1_3 * a_1_3/d_1_3);
                const Eclipse_y_1_3 = src_1.y + (d_y_1_3 * a_1_3/d_1_3);
                
                const Eclipse_x_2_3 = src_2.x + (d_x_2_3 * a_2_3/d_2_3);
                const Eclipse_y_2_3 = src_2.y + (d_y_2_3 * a_2_3/d_2_3);
                
                
                
                //Distance from point in eclipse to one of intersection points
                const h_1_2 = Math.sqrt(sq2(src_1.r) - sq2(a_1_2));
                const h_1_3 = Math.sqrt(sq2(src_1.r) - sq2(a_1_3));
                const h_2_3 = Math.sqrt(sq2(src_2.r) - sq2(a_2_3));
                
                
                //The offset of the intersection points from eclipse point
                const offset_1_2_x = -d_y_1_2 * (h_1_2/d_1_2);
                const offset_1_2_y = d_x_1_2 * (h_1_2/d_1_2);
                
                const");
                WriteLiteral(@" offset_1_3_x = -d_y_1_3 * (h_1_3/d_1_3);
                const offset_1_3_y = d_x_1_3 * (h_1_3/d_1_3);
                
                const offset_2_3_x = -d_y_2_3 * (h_2_3/d_2_3);
                const offset_2_3_y = d_x_2_3 * (h_2_3/d_2_3);
                
                
                //Intersection points
                
                // BETWEEN CIRCLE 1 AND 2
                const intersection_1_x_1_2 = Eclipse_x_1_2 + offset_1_2_x;
                const intersection_1_y_1_2 = Eclipse_y_1_2 + offset_1_2_y;
                const intersection_2_x_1_2 = Eclipse_x_1_2 - offset_1_2_x;
                const intersection_2_y_1_2 = Eclipse_y_1_2 - offset_1_2_y;
                
                // BETWEEN CIRCLE 1 AND 3
                const intersection_1_x_1_3 = Eclipse_x_1_3 + offset_1_3_x;
                const intersection_1_y_1_3 = Eclipse_y_1_3 + offset_1_3_y;
                const intersection_2_x_1_3 = Eclipse_x_1_3 - offset_1_3_x;
                const intersection_2_y_1_3 =");
                WriteLiteral(@" Eclipse_y_1_3 - offset_1_3_y;
                
                // BETWEEN CIRCLE 2 AND 3
                const intersection_1_x_2_3 = Eclipse_x_2_3 + offset_2_3_x;
                const intersection_1_y_2_3 = Eclipse_y_2_3 + offset_2_3_y;
                const intersection_2_x_2_3 = Eclipse_x_2_3 - offset_2_3_x;
                const intersection_2_y_2_3 = Eclipse_y_2_3 - offset_2_3_y;


//                console.log(""Intersection 1 Between 1 and 2 is: ("",
//                    intersection_1_x_1_2 + "", "" + intersection_1_y_1_2 + "")"");
//                console.log(""Intersection 2 Between 1 and 2 is: ("",
//                    intersection_2_x_1_2 + "", "" + intersection_2_y_1_2 + "")"");
//                console.log(""Intersection 1 Between 1 and 3 is: ("",
//                    intersection_1_x_1_3 + "", "" + intersection_1_y_1_3 + "")"");
//                console.log(""Intersection 2 Between 1 and 3 is: ("",
//                    intersection_2_x_1_3 + "", "" + intersection_2_y_1_3 + "")"");
//         ");
                WriteLiteral(@"       console.log(""Intersection 1 Between 2 and 3 is: ("",
//                    intersection_1_x_2_3 + "", "" + intersection_1_y_2_3 + "")"");
//                console.log(""Intersection 2 Between 2 and 3 is: ("",
//                    intersection_2_x_2_3 + "", "" + intersection_2_y_2_3 + "")"");

                const d_3_1 = Math.sqrt(sq2(src_3.x - intersection_1_x_1_2) + sq2(src_3.y - intersection_1_y_1_2));
                const d_3_2 = Math.sqrt(sq2(src_3.x - intersection_2_x_1_2) + sq2(src_3.y - intersection_2_y_1_2));
                
                const d_2_1 = Math.sqrt(sq2(src_2.x - intersection_1_x_1_3) + sq2(src_2.y - intersection_1_y_1_3));
                const d_2_2 = Math.sqrt(sq2(src_2.x - intersection_2_x_1_3) + sq2(src_2.y - intersection_2_y_1_3));
                
                const d_1_1 = Math.sqrt(sq2(src_1.x - intersection_1_x_2_3) + sq2(src_1.y - intersection_1_y_2_3));
                const d_1_2_ = Math.sqrt(sq2(src_1.x - intersection_2_x_2_3) + sq2(src_1.y - intersection_");
                WriteLiteral(@"2_y_2_3));
                

                //Choose the triangle points
                let trianglePoint_1_x_B_1_2;
                let trianglePoint_1_y_B_1_2;
                
                let trianglePoint_2_x_B_1_3;
                let trianglePoint_2_y_B_1_3;
                
                let trianglePoint_3_x_B_2_3;
                let trianglePoint_3_y_B_2_3;
                
                
                
                //Collect the correct point for intersection between 1 and 2
                if (d_3_1 < d_3_2){
                    trianglePoint_1_x_B_1_2 = intersection_1_x_1_2;
                    trianglePoint_1_y_B_1_2 = intersection_1_y_1_2;
                }
                else{
                    trianglePoint_1_x_B_1_2 = intersection_2_x_1_2;
                    trianglePoint_1_y_B_1_2 = intersection_2_y_1_2;
                }
                
                
                
                //Collect the correct point for intersection between 1 and");
                WriteLiteral(@" 3
                if (d_2_1 < d_2_2){
                    trianglePoint_2_x_B_1_3 = intersection_1_x_1_3;
                    trianglePoint_2_y_B_1_3 = intersection_1_y_1_3;
                }
                else{
                    trianglePoint_2_x_B_1_3 = intersection_2_x_1_3;
                    trianglePoint_2_y_B_1_3 = intersection_2_y_1_3;
                }
                
                
                //Collect the correct point for intersection between 2 and 3
                if (d_1_1 < d_1_2_){
                    trianglePoint_3_x_B_2_3 = intersection_1_x_2_3;
                    trianglePoint_3_y_B_2_3 = intersection_1_y_2_3;
                }
                else{
                    trianglePoint_3_x_B_2_3 = intersection_2_x_2_3;
                    trianglePoint_3_y_B_2_3 = intersection_2_y_2_3;
                }
                
                console.log(""Triangle Intersection between 1 and 2.. x: "" + trianglePoint_1_x_B_1_2 + "", y: "" + trianglePoint_1_y_B_1_2);
");
                WriteLiteral(@"                console.log(""Triangle Intersection between 1 and 3.. x: "" + trianglePoint_2_x_B_1_3 + "", y: "" + trianglePoint_2_y_B_1_3);
                console.log(""Triangle Intersection between 2 and 3.. x: "" + trianglePoint_3_x_B_2_3 + "", y: "" + trianglePoint_3_y_B_2_3);
                
                const triangularPoint = {
                    x: (trianglePoint_1_x_B_1_2 + trianglePoint_2_x_B_1_3 + trianglePoint_3_x_B_2_3) /3,
                    y: (trianglePoint_1_y_B_1_2 + trianglePoint_2_y_B_1_3 + trianglePoint_3_y_B_2_3) /3
                }

                console.log(triangularPoint);
                return triangularPoint;


            }
            
//            function calculateXY(x, y) {
//                
//                const realWidth = $(map).width();
//                const realHeight = $(map).height();
//
//                x = realWidth * x / 50;
//                y = realHeight * y / 38;
//                
//                let posX = $(mapPic).offset().l");
                WriteLiteral(@"eft - $(element).width()/2;
//                let posY = $(mapPic).offset().top - $(element).height()/2 + realHeight;
//
//                posX += x;
//                posY -= y;
//                return {x: x, y: y}
//            }

                setInterval(function(){track();}, 2000)
            
            
            
            //END OF Intersection AREA


            function track() {
                $.ajax({
                    type: ""GET"",
                    url: ""/Challenge_2/GetDistance"",
                    success: function(response) {
                        
                        const circ_1 = {x: response.b1.x, y: response.b1.y, r: response.b1.estimatedDistance}
                        const circ_2 = {x: response.b2.x, y: response.b2.y, r: response.b2.estimatedDistance}
                        const circ_3 = {x: response.b3.x, y: response.b3.y, r: response.b3.estimatedDistance}
                        console.log(circ_2.x);
                        while (!any");
                WriteLiteral(@"Intersection(circ_1, circ_2, circ_3)) {
                            circ_1.r += 1;
                            circ_2.r += 1;
                            circ_3.r += 1;

                        }
                            var mobilePoint = getIntersection(circ_1, circ_2, circ_3);
                            setElementPos($(mobile), $(map), mobilePoint.x, mobilePoint.y);
                        
                        


//                      
                    }
                    
                });
                return true;
            }


        });
    </script>
    
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
